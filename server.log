🚀 Starting MCP-nREPL Proxy HTTP Server...
📍 Connecting to Joyride nREPL on port 62577
🌐 HTTP server will listen on port 3000
🔗 MCP endpoint: http://localhost:3000/mcp
💚 Health check: http://localhost:3000/health
----------------------------------------
[info] 🔧 MCP-nREPL Proxy Configuration:
[info]    Debug mode:true
[info]    Workspace:/Users/franksiebenlist/Development/mcp-nrepl-joyride
[info]    Transport::http
[info]    HTTP port:3000
[info]    Babashka nREPL port:7889
[info] Starting nREPL heartbeat monitor
[info] 🔧 Starting Babashka nREPL server on port:7889
Started nREPL server at 0.0.0.0:7889
[info] ✅ Babashka nREPL server started - connect Calva to localhost:7889
[info] 🔍 Found nREPL port:62577
[info] Connecting to nREPL atlocalhost:62577
[info] Connected to nREPL successfully
[info] ✅ Auto-connected to Joyride nREPL
[info] 🚀 MCP-nREPL proxy server starting (HTTP)
[info] 📡 Listening for HTTP MCP requests on port3000
[info] 🔗 MCP endpoint: http://localhost:3000/mcp
[info] 💚 Health check: http://localhost:3000/health
[info] ✅ HTTP server started on port3000
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-load-filewith args:{:file-path "/Users/franksiebenlist/Development/mcp-nrepl-joyride/test-file.clj"}
[nREPL] 📤 Sending: {:op "load-file", :file "(ns test.example\n  \"A simple test namespace for testing nrepl-load-file\")\n\n(defn greet\n  \"A simple greeting function\"\n  [name]\n  (str \"Hello, \" name \"!\"))\n\n(def pi 3.14159)\n\n(println \"test-file.clj loaded successfully!\")", :file-path "/Users/franksiebenlist/Development/mcp-nrepl-joyride/test-file.clj", :file-name "test-file.clj", :id "c8851fda-deab-4258-80e0-c36cbf2d4e25"}
[nREPL] 📥 Received response: {:id c8851fda-deab-4258-80e0-c36cbf2d4e25, :out test-file.clj loaded successfully!}
[nREPL] 📥 Received response: {:id c8851fda-deab-4258-80e0-c36cbf2d4e25, :out 
}
[nREPL] 📥 Received response: {:id c8851fda-deab-4258-80e0-c36cbf2d4e25, :ns user, :value nil}
[nREPL] 📥 Received response: {:id c8851fda-deab-4258-80e0-c36cbf2d4e25, :status [done]}
[nREPL] 📥 Final merged response: {:out test-file.clj loaded successfully!
, :value nil, :ns user, :status [done]}
[debug] Load-file result:{:out "test-file.clj loaded successfully!\n", :value "nil", :ns "user", :status ["done"]}
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-evalwith args:{:code "(test.example/greet \"World\")"}
[nREPL] 📤 Sending: {:op "eval", :code "(test.example/greet \"World\")", :id "203e4577-8cd0-4d2d-a3fc-e28350cdac08"}
[nREPL] 📥 Received response: {:id 203e4577-8cd0-4d2d-a3fc-e28350cdac08, :ns test.example, :value "Hello, World!"}
[nREPL] 📥 Received response: {:id 203e4577-8cd0-4d2d-a3fc-e28350cdac08, :status [done]}
[nREPL] 📥 Final merged response: {:value "Hello, World!", :ns test.example, :status [done]}
[debug] nREPL result:{:value "\"Hello, World!\"", :ns "test.example", :status ["done"]}
[debug] Result keys:(:value :ns :status)
[debug] Value field exists?true
[debug] Value field content:"\"Hello, World!\""
[debug] Output field content:nil
[debug] Response decision: has-meaningful-value=true has-output= has-error=
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-evalwith args:{:code "test.example/pi"}
[nREPL] 📤 Sending: {:op "eval", :code "test.example/pi", :id "0b7fac1e-0c96-4d0f-8199-a542d400a704"}
[nREPL] 📥 Received response: {:id 0b7fac1e-0c96-4d0f-8199-a542d400a704, :ns test.example, :value 3.14159}
[nREPL] 📥 Received response: {:id 0b7fac1e-0c96-4d0f-8199-a542d400a704, :status [done]}
[nREPL] 📥 Final merged response: {:value 3.14159, :ns test.example, :status [done]}
[debug] nREPL result:{:value "3.14159", :ns "test.example", :status ["done"]}
[debug] Result keys:(:value :ns :status)
[debug] Value field exists?true
[debug] Value field content:"3.14159"
[debug] Output field content:nil
[debug] Response decision: has-meaningful-value=true has-output= has-error=
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-load-filewith args:{:file-path "/Users/franksiebenlist/Development/mcp-nrepl-joyride/non-existent.clj"}
[error] Load-file failed:File not found: /Users/franksiebenlist/Development/mcp-nrepl-joyride/non-existent.clj
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-evalwith args:{:code "(+ 1 2 3)"}
[nREPL] 📤 Sending: {:op "eval", :code "(+ 1 2 3)", :id "87b1de02-43f5-4528-92f3-ede10256dcb1"}
[nREPL] 📥 Received response: {:id 87b1de02-43f5-4528-92f3-ede10256dcb1, :ns test.example, :value 6}
[nREPL] 📥 Received response: {:id 87b1de02-43f5-4528-92f3-ede10256dcb1, :status [done]}
[nREPL] 📥 Final merged response: {:value 6, :ns test.example, :status [done]}
[debug] nREPL result:{:value "6", :ns "test.example", :status ["done"]}
[debug] Result keys:(:value :ns :status)
[debug] Value field exists?true
[debug] Value field content:"6"
[debug] Output field content:nil
[debug] Response decision: has-meaningful-value=true has-output= has-error=
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-load-filewith args:{:file-path "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj"}
[nREPL] 📤 Sending: {:op "load-file", :file "(ns python-introspection-utils\n  \"Utility functions for Python application introspection via Basilisp interop.\n   \n   Load this file into your nREPL session to access convenient Python\n   introspection functions that combine multiple operations.\"\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pp]))\n\n;; =============================================================================\n;; Core Python Interop Helpers\n;; =============================================================================\n\n(defn py-safe-getattr\n  \"Safely get attribute from Python object with default value\"\n  [obj attr default]\n  (if (python/hasattr obj attr)\n    (python/getattr obj attr)\n    default))\n\n(defn py-safe-call\n  \"Safely call Python function, returning default on error\"\n  [f default & args]\n  (try\n    (apply f args)\n    (catch Exception e\n      (println \"Python call failed:\" (.getMessage e))\n      default)))\n\n(defn py-filter-safe-attrs\n  \"Filter out private and sensitive attributes from Python object\"\n  [attrs]\n  (->> attrs\n       (filter string?)\n       (filter #(not (.startswith % \"_\")))\n       (filter #(not (.contains (.toLowerCase %) \"secret\")))\n       (filter #(not (.contains (.toLowerCase %) \"password\")))\n       (filter #(not (.contains (.toLowerCase %) \"token\")))\n       sort))\n\n;; =============================================================================\n;; System Information\n;; =============================================================================\n\n(defn py-system-info\n  \"Get comprehensive Python system information\"\n  []\n  (let [info {:python-version (str (python/sys.version-info))\n              :platform (py-safe-call python/platform.system \"unknown\")\n              :cwd (py-safe-call python/os.getcwd \"unknown\")\n              :pid (py-safe-call python/os.getpid \"unknown\")\n              :thread-count (py-safe-call python/threading.active-count \"unknown\")}]\n    (pp/pprint info)\n    info))\n\n(defn py-memory-info\n  \"Get memory usage information (requires psutil)\"\n  []\n  (try\n    (let [process (python/psutil.Process)\n          memory-info (python/process.memory_info)\n          info {:rss-mb (/ (python/memory_info.rss) 1024 1024)\n                :vms-mb (/ (python/memory_info.vms) 1024 1024)\n                :percent (python/process.memory_percent)\n                :gc-stats (python/gc.get_stats)}]\n      (pp/pprint info)\n      info)\n    (catch Exception e\n      (println \"Memory info failed (install psutil?):\" (.getMessage e))\n      {:error \"psutil not available\"})))\n\n;; =============================================================================\n;; Module and Import Analysis\n;; =============================================================================\n\n(defn py-list-app-modules\n  \"List all imported modules matching app prefix\"\n  [app-prefix]\n  (->> (python/sys.modules.keys)\n       (map str)\n       (filter #(.startswith % app-prefix))\n       sort))\n\n(defn py-module-info\n  \"Get detailed information about a Python module\"\n  [module-name]\n  (try\n    (let [module (python/sys.modules.get module-name)]\n      (if module\n        (let [attrs (py-filter-safe-attrs (python/dir module))\n              info {:name module-name\n                    :file (py-safe-getattr module \"__file__\" \"built-in\")\n                    :doc (py-safe-getattr module \"__doc__\" \"No docstring\")\n                    :attributes (take 20 attrs)\n                    :attribute-count (count attrs)}]\n          (pp/pprint info)\n          info)\n        {:error (str \"Module \" module-name \" not found\")}))\n    (catch Exception e\n      {:error (.getMessage e)})))\n\n(defn py-explore-object\n  \"Deep exploration of Python object\"\n  [obj]\n  (let [obj-type (python/type obj)\n        attrs (py-filter-safe-attrs (python/dir obj))\n        methods (->> attrs\n                     (filter #(python/callable (python/getattr obj %)))\n                     (take 10))\n        properties (->> attrs\n                        (filter #(not (python/callable (python/getattr obj %))))\n                        (take 10))\n        info {:type (str obj-type)\n              :methods methods\n              :properties properties  \n              :total-attributes (count attrs)\n              :mro (map str (python/inspect.getmro obj-type))}]\n    (pp/pprint info)\n    info))\n\n;; =============================================================================\n;; Application Health Checks\n;; =============================================================================\n\n(defn py-health-check\n  \"Comprehensive Python application health check\"\n  []\n  (println \"🔍 Python Application Health Check\")\n  (println \"=\" 50)\n  \n  (let [health {:system (py-system-info)\n                :memory (py-memory-info)\n                :modules (count (python/sys.modules))\n                :timestamp (str (python/datetime.datetime.now))}]\n    \n    ;; Check common frameworks\n    (println \"\\n📦 Framework Detection:\")\n    (doseq [[framework module] [[\"Django\" \"django\"]\n                                [\"Flask\" \"flask\"] \n                                [\"FastAPI\" \"fastapi\"]\n                                [\"Celery\" \"celery\"]]]\n      (if (python/sys.modules.get module)\n        (println (str \"✅ \" framework \" detected\"))\n        (println (str \"❌ \" framework \" not found\"))))\n    \n    health))\n\n(defn py-config-summary\n  \"Safe configuration summary (filters secrets)\"\n  []\n  (println \"⚙️ Configuration Summary\")\n  (println \"=\" 30)\n  \n  ;; Try common config locations\n  (let [configs (atom {})]\n    \n    ;; Flask config\n    (when-let [app (python/sys.modules.get \"flask\")]\n      (when (python/hasattr python/app \"config\")\n        (swap! configs assoc :flask\n               (->> (python/dict python/app.config)\n                    (filter (fn [[k v]] \n                      (not (.contains (.toUpperCase (str k)) \"SECRET\"))))\n                    (into {})))))\n    \n    ;; Django settings  \n    (when (python/sys.modules.get \"django\")\n      (try\n        (swap! configs assoc :django\n               (->> (python/dir python/django.conf.settings)\n                    (py-filter-safe-attrs)\n                    (map (fn [attr] \n                      [attr (python/getattr python/django.conf.settings attr)]))\n                    (take 10)\n                    (into {})))\n        (catch Exception e\n          (swap! configs assoc :django {:error \"Settings not accessible\"}))))\n    \n    (pp/pprint @configs)\n    @configs))\n\n;; =============================================================================\n;; Database and Connection Monitoring\n;; =============================================================================\n\n(defn py-db-status\n  \"Check database connection status\"\n  []\n  (println \"🗄️ Database Status\")\n  (println \"=\" 20)\n  \n  (let [status (atom {})]\n    \n    ;; Django database\n    (when (python/sys.modules.get \"django\")\n      (try\n        (swap! status assoc :django-db\n               {:databases (python/django.db.connections.databases)\n                :default-connected (str (python/django.db.connection.is_usable))})\n        (catch Exception e\n          (swap! status assoc :django-db {:error (.getMessage e)}))))\n    \n    ;; SQLAlchemy\n    (when-let [app (python/sys.modules.get \"flask\")]\n      (when (and (python/hasattr python/app \"db\") \n                 (python/hasattr python/app.db \"engine\"))\n        (swap! status assoc :sqlalchemy\n               {:pool-size (py-safe-call python/app.db.engine.pool.size 0)\n                :checked-out (py-safe-call python/app.db.engine.pool.checkedout 0)})))\n    \n    (pp/pprint @status)\n    @status))\n\n;; =============================================================================\n;; Performance and Monitoring\n;; =============================================================================\n\n(defn py-performance-snapshot\n  \"Take performance snapshot of Python application\"\n  []\n  (println \"📊 Performance Snapshot\")\n  (println \"=\" 25)\n  \n  (let [start-time (System/currentTimeMillis)\n        snapshot {:memory (py-memory-info)\n                  :threads (python/threading.active-count)\n                  :gc-collections (reduce + (map #(python/% \"collections\") (python/gc.get_stats)))\n                  :open-files (try \n                                (python/len (python/psutil.Process.open_files))\n                                (catch Exception e 0))}]\n    \n    ;; Add async info if available\n    (when (python/sys.modules.get \"asyncio\")\n      (try\n        (let [tasks (python/asyncio.all_tasks)]\n          (swap! (atom snapshot) assoc :async-tasks\n                 {:total (python/len tasks)\n                  :running (->> tasks \n                                (filter #(not (python/%.done)))\n                                count)}))\n        (catch Exception e\n          ;; No async loop running\n          nil)))\n    \n    (assoc snapshot :snapshot-time-ms (- (System/currentTimeMillis) start-time))))\n\n;; =============================================================================\n;; Development Utilities\n;; =============================================================================\n\n(defn py-reload-module\n  \"Safely reload a Python module\"\n  [module-name]\n  (try\n    (let [module (python/importlib.import-module module-name)\n          reloaded (python/importlib.reload module)]\n      (println (str \"✅ Reloaded module: \" module-name))\n      {:status \"success\" :module module-name})\n    (catch Exception e\n      (println (str \"❌ Failed to reload \" module-name \": \" (.getMessage e)))\n      {:status \"error\" :module module-name :error (.getMessage e)})))\n\n(defn py-clear-caches\n  \"Clear various Python application caches\"\n  []\n  (let [results (atom [])]\n    \n    ;; Django cache\n    (when (python/sys.modules.get \"django\")\n      (try\n        (python/django.core.cache.cache.clear)\n        (swap! results conj \"✅ Django cache cleared\")\n        (catch Exception e\n          (swap! results conj (str \"❌ Django cache: \" (.getMessage e))))))\n    \n    ;; Flask cache (if using Flask-Caching)\n    (when-let [app (python/sys.modules.get \"flask\")]\n      (when (python/hasattr python/app \"cache\")\n        (try\n          (python/app.cache.clear)\n          (swap! results conj \"✅ Flask cache cleared\")\n          (catch Exception e\n            (swap! results conj (str \"❌ Flask cache: \" (.getMessage e)))))))\n    \n    ;; Python import cache\n    (try\n      (python/importlib.invalidate_caches)\n      (swap! results conj \"✅ Import caches invalidated\")\n      (catch Exception e\n        (swap! results conj (str \"❌ Import cache: \" (.getMessage e)))))\n    \n    (doseq [result @results]\n      (println result))\n    \n    @results))\n\n;; =============================================================================\n;; Convenience Functions\n;; =============================================================================\n\n(defn py-quick-status\n  \"Quick one-liner status check\"\n  []\n  (let [info {:modules (count (python/sys.modules))\n              :threads (python/threading.active-count)\n              :memory-mb (try \n                           (/ (python/psutil.Process.memory_info.rss) 1024 1024)\n                           (catch Exception e \"N/A\"))}]\n    (println (str \"📊 Quick Status: \" \n                  (:modules info) \" modules, \" \n                  (:threads info) \" threads, \" \n                  (:memory-mb info) \" MB\"))\n    info))\n\n(defn py-find-by-pattern\n  \"Find Python objects matching pattern\"\n  [pattern]\n  (->> (python/sys.modules.items)\n       (mapcat (fn [[module-name module]]\n         (->> (python/dir module)\n              (filter #(.contains (.toLowerCase %) (.toLowerCase pattern)))\n              (map (fn [attr] [module-name attr])))))\n       (take 20)))\n\n;; =============================================================================\n;; Usage Examples and Documentation\n;; =============================================================================\n\n(defn py-help\n  \"Show available Python introspection functions\"\n  []\n  (println \"\\n🐍 Python Introspection Utils - Available Functions:\")\n  (println \"=\" 60)\n  (println \"\n📊 System & Health:\n  (py-system-info)         - System information\n  (py-memory-info)         - Memory usage details  \n  (py-health-check)        - Comprehensive health check\n  (py-quick-status)        - One-line status summary\n  \n🔍 Module & Object Exploration:\n  (py-list-app-modules \\\"myapp\\\") - List app modules\n  (py-module-info \\\"module.name\\\") - Module details\n  (py-explore-object obj)       - Deep object inspection\n  (py-find-by-pattern \\\"user\\\")   - Find matching objects\n  \n⚙️ Configuration & Database:\n  (py-config-summary)      - Safe config overview\n  (py-db-status)           - Database connections\n  \n📈 Performance & Monitoring:\n  (py-performance-snapshot) - Performance metrics\n  \n🛠️ Development Tools:\n  (py-reload-module \\\"module\\\")  - Reload Python module\n  (py-clear-caches)         - Clear application caches\n  \n💡 Usage Tips:\n  - Start with (py-health-check) for overview\n  - Use (py-quick-status) for frequent monitoring  \n  - Explore objects with (py-explore-object obj)\n  - Always test in development first!\n\")\n  nil)\n\n;; Show help on load\n(py-help)", :file-path "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj", :file-name "python_introspection_utils.clj", :id "80301314-0413-4fac-8c7c-685adca28d98"}
[nREPL] 📥 Received response: {:err Could not find namespace: clojure.pprint.
, :id 80301314-0413-4fac-8c7c-685adca28d98}
[nREPL] 📥 Received response: {:ex #error {:message "Could not find namespace: clojure.pprint.", :data {:type :sci/error, :line 6, :column 3, :message "Could not find namespace: clojure.pprint.", :sci.impl/callstack #object[cljs.core.Volatile {:val ({:line 6, :column 3, :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj", :ns #object[NY python-introspection-utils]})}], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj"}, :cause #object[Error Error: Could not find namespace: clojure.pprint.]}, :id 80301314-0413-4fac-8c7c-685adca28d98, :ns user, :status [done]}
[nREPL] 📥 Final merged response: {:err Could not find namespace: clojure.pprint.
, :ex #error {:message "Could not find namespace: clojure.pprint.", :data {:type :sci/error, :line 6, :column 3, :message "Could not find namespace: clojure.pprint.", :sci.impl/callstack #object[cljs.core.Volatile {:val ({:line 6, :column 3, :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj", :ns #object[NY python-introspection-utils]})}], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj"}, :cause #object[Error Error: Could not find namespace: clojure.pprint.]}, :ns user, :status [done]}
[debug] Load-file result:{:err "Could not find namespace: clojure.pprint.\n", :ex "#error {:message \"Could not find namespace: clojure.pprint.\", :data {:type :sci/error, :line 6, :column 3, :message \"Could not find namespace: clojure.pprint.\", :sci.impl/callstack #object[cljs.core.Volatile {:val ({:line 6, :column 3, :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj\", :ns #object[NY python-introspection-utils]})}], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_introspection_utils.clj\"}, :cause #object[Error Error: Could not find namespace: clojure.pprint.]}", :ns "user", :status ["done"]}
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-load-filewith args:{:file-path "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"}
[nREPL] 📤 Sending: {:op "load-file", :file "(ns python-utils-simple\n  \"Simple Python introspection utilities for Babashka nREPL.\n   \n   These functions work with basic Babashka without external dependencies.\")\n\n;; =============================================================================\n;; Basic Python Interop Functions\n;; =============================================================================\n\n(defn py-system-info\n  \"Get basic Python system information\"\n  []\n  (let [info {:python-version (str (python/sys.version-info))\n              :platform (try (python/platform.system) (catch Exception e \"unknown\"))\n              :cwd (try (python/os.getcwd) (catch Exception e \"unknown\"))\n              :thread-count (try (python/threading.active-count) (catch Exception e \"unknown\"))}]\n    (println \"🐍 Python System Information:\")\n    (doseq [[k v] info]\n      (println (str \"  \" (name k) \": \" v)))\n    info))\n\n(defn py-quick-status\n  \"Quick Python runtime status\"\n  []\n  (let [module-count (count (python/sys.modules))\n        thread-count (try (python/threading.active-count) (catch Exception e \"N/A\"))]\n    (println (str \"📊 Quick Status: \" module-count \" modules, \" thread-count \" threads\"))\n    {:modules module-count :threads thread-count}))\n\n(defn py-list-modules\n  \"List Python modules matching prefix\"\n  [prefix]\n  (->> (python/sys.modules.keys)\n       (map str)\n       (filter #(.startswith % prefix))\n       sort))\n\n(defn py-explore-simple\n  \"Simple object exploration\"\n  [obj]\n  (let [obj-type (python/type obj)\n        attrs (python/dir obj)]\n    (println (str \"Object type: \" obj-type))\n    (println (str \"Attributes count: \" (count attrs)))\n    (println \"Sample attributes:\")\n    (->> attrs\n         (filter #(not (.startswith % \"_\")))\n         (take 10)\n         (map #(println (str \"  \" %)))\n         doall)\n    {:type (str obj-type) :attribute-count (count attrs)}))\n\n(defn py-test-interop\n  \"Test basic Python interop functionality\"\n  []\n  (println \"🧪 Testing Python Interop:\")\n  \n  ;; Test basic operations\n  (println \"✅ Basic math:\" (python/+ 2 3))\n  (println \"✅ List operations:\" (python/len [1 2 3 4 5]))\n  (println \"✅ String operations:\" (python/str.upper \"hello\"))\n  (println \"✅ Type checking:\" (python/type \"hello\"))\n  \n  ;; Test module access\n  (println \"✅ Sys module:\" (python/sys.version-info.major))\n  (println \"✅ OS module:\" (try (python/os.name) (catch Exception e \"not available\")))\n  \n  \"All tests completed!\")\n\n(defn py-help\n  \"Show available simple Python functions\"\n  []\n  (println \"\\n🐍 Simple Python Utils:\")\n  (println \"=\" 30)\n  (println \"  (py-system-info)     - System information\")\n  (println \"  (py-quick-status)    - Quick status check\") \n  (println \"  (py-list-modules \\\"prefix\\\") - List modules\")\n  (println \"  (py-explore-simple obj)   - Explore object\")\n  (println \"  (py-test-interop)    - Test Python interop\")\n  (println \"  (py-help)            - Show this help\")\n  nil)\n\n;; Show help on load\n(println \"\\n🎉 Simple Python introspection utils loaded!\")\n(py-help)", :file-path "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :file-name "python_utils_simple.clj", :id "4608667d-170b-4a69-a0ff-85065249a075"}
[nREPL] 📥 Received response: {:err Could not resolve symbol: python/sys.version-info
, :id 4608667d-170b-4a69-a0ff-85065249a075}
[nREPL] 📥 Received response: {:ex #error {:message "Could not resolve symbol: python/sys.version-info", :data {:type :sci/error, :line 13, :column 36, :message "Could not resolve symbol: python/sys.version-info", :sci.impl/callstack #object[cljs.core.Volatile {:val ({:line 10, :column 1, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 10, :column 1, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name defn, :arglists ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]), :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions."}} {:line 10, :column 1, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name fn, :arglists ([& sigs]), :doc "params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function"}} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name let, :arglists ([bindings & body]), :doc "binding => binding-form init-expr\n  binding-form => name, or destructuring-form\n  destructuring-form => map-destructure-form, or seq-destructure-form\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.\n\n  See https://clojure.org/reference/special_forms#binding-forms for\n  more information about destructuring."}} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 31, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 31, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:name str, :arglists ([] [x] [x & ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :sci/built-in true, :ns #object[NY clojure.core]}} {:line 13, :column 36, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"})}], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :phase "analysis"}, :cause #error {:message "Could not resolve symbol: python/sys.version-info", :data {:type :sci/error, :line 10, :column 1, :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :phase "analysis"}}}, :id 4608667d-170b-4a69-a0ff-85065249a075, :ns user, :status [done]}
[nREPL] 📥 Final merged response: {:err Could not resolve symbol: python/sys.version-info
, :ex #error {:message "Could not resolve symbol: python/sys.version-info", :data {:type :sci/error, :line 13, :column 36, :message "Could not resolve symbol: python/sys.version-info", :sci.impl/callstack #object[cljs.core.Volatile {:val ({:line 10, :column 1, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 10, :column 1, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name defn, :arglists ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]), :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions."}} {:line 10, :column 1, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name fn, :arglists ([& sigs]), :doc "params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function"}} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name let, :arglists ([bindings & body]), :doc "binding => binding-form init-expr\n  binding-form => name, or destructuring-form\n  destructuring-form => map-destructure-form, or seq-destructure-form\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.\n\n  See https://clojure.org/reference/special_forms#binding-forms for\n  more information about destructuring."}} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 31, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"} {:line 13, :column 31, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :sci.impl/f-meta {:name str, :arglists ([] [x] [x & ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :sci/built-in true, :ns #object[NY clojure.core]}} {:line 13, :column 36, :ns #object[NY python-utils-simple], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj"})}], :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :phase "analysis"}, :cause #error {:message "Could not resolve symbol: python/sys.version-info", :data {:type :sci/error, :line 10, :column 1, :file "/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj", :phase "analysis"}}}, :ns user, :status [done]}
[debug] Load-file result:{:err "Could not resolve symbol: python/sys.version-info\n", :ex "#error {:message \"Could not resolve symbol: python/sys.version-info\", :data {:type :sci/error, :line 13, :column 36, :message \"Could not resolve symbol: python/sys.version-info\", :sci.impl/callstack #object[cljs.core.Volatile {:val ({:line 10, :column 1, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"} {:line 10, :column 1, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name defn, :arglists ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]), :doc \"Same as (def name (core/fn [params* ] exprs*)) or (def\\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\\n    to the var metadata. prepost-map defines a map with optional keys\\n    :pre and :post that contain collections of pre or post conditions.\"}} {:line 10, :column 1, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name fn, :arglists ([& sigs]), :doc \"params => positional-params* , or positional-params* & next-param\\n  positional-param => binding-form\\n  next-param => binding-form\\n  name => symbol\\n\\n  Defines a function\"}} {:sci.impl/fn {:macro nil, :fn-name py-system-info}, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\", :sci.impl/f-meta {:ns #object[NY clojure.core], :macro true, :sci/built-in true, :name let, :arglists ([bindings & body]), :doc \"binding => binding-form init-expr\\n  binding-form => name, or destructuring-form\\n  destructuring-form => map-destructure-form, or seq-destructure-form\\n\\n  Evaluates the exprs in a lexical context in which the symbols in\\n  the binding-forms are bound to their respective init-exprs or parts\\n  therein.\\n\\n  See https://clojure.org/reference/special_forms#binding-forms for\\n  more information about destructuring.\"}} {:line 13, :column 3, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"} {:line 13, :column 31, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"} {:line 13, :column 31, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\", :sci.impl/f-meta {:name str, :arglists ([] [x] [x & ys]), :doc \"With no args, returns the empty string. With one arg x, returns\\n  x.toString().  (str nil) returns the empty string. With more than\\n  one arg, returns the concatenation of the str values of the args.\", :sci/built-in true, :ns #object[NY clojure.core]}} {:line 13, :column 36, :ns #object[NY python-utils-simple], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\"})}], :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\", :phase \"analysis\"}, :cause #error {:message \"Could not resolve symbol: python/sys.version-info\", :data {:type :sci/error, :line 10, :column 1, :file \"/Users/franksiebenlist/Development/mcp-nrepl-joyride/examples/python_utils_simple.clj\", :phase \"analysis\"}}}", :ns "user", :status ["done"]}
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-evalwith args:{:code "(+ 1 2 3)"}
[nREPL] 📤 Sending: {:op "eval", :code "(+ 1 2 3)", :id "b2143187-bcc4-480d-a037-70252b349e89"}
[nREPL] 📥 Received response: {:id b2143187-bcc4-480d-a037-70252b349e89, :ns test.example, :value 6}
[nREPL] 📥 Received response: {:id b2143187-bcc4-480d-a037-70252b349e89, :status [done]}
[nREPL] 📥 Final merged response: {:value 6, :ns test.example, :status [done]}
[debug] nREPL result:{:value "6", :ns "test.example", :status ["done"]}
[debug] Result keys:(:value :ns :status)
[debug] Value field exists?true
[debug] Value field content:"6"
[debug] Output field content:nil
[debug] Response decision: has-meaningful-value=true has-output= has-error=
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-evalwith args:{:code "(+ 1 2 3)"}
[nREPL] 📤 Sending: {:op "eval", :code "(+ 1 2 3)", :id "f9366988-3aad-4d8f-a045-30c190f29c40"}
[nREPL] 📥 Received response: {:id f9366988-3aad-4d8f-a045-30c190f29c40, :ns test.example, :value 6}
[nREPL] 📥 Received response: {:id f9366988-3aad-4d8f-a045-30c190f29c40, :status [done]}
[nREPL] 📥 Final merged response: {:value 6, :ns test.example, :status [done]}
[debug] nREPL result:{:value "6", :ns "test.example", :status ["done"]}
[debug] Result keys:(:value :ns :status)
[debug] Value field exists?true
[debug] Value field content:"6"
[debug] Output field content:nil
[debug] Response decision: has-meaningful-value=true has-output= has-error=
[debug] 📤 HTTP response for method:tools/call
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:initialize
[debug] 📤 HTTP response for method:initialize
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/list
[debug] 📤 HTTP response for method:tools/list
[debug] 📥 HTTP request::post/mcp
[debug] Handling request:tools/call
[debug] Calling tool:nrepl-evalwith args:{:code "(+ 1 2 3)"}
[nREPL] 📤 Sending: {:op "eval", :code "(+ 1 2 3)", :id "da77337a-05c0-4eb1-be59-899a04cb7ce2"}
[nREPL] 📥 Received response: {:id da77337a-05c0-4eb1-be59-899a04cb7ce2, :ns test.example, :value 6}
[nREPL] 📥 Received response: {:id da77337a-05c0-4eb1-be59-899a04cb7ce2, :status [done]}
[nREPL] 📥 Final merged response: {:value 6, :ns test.example, :status [done]}
[debug] nREPL result:{:value "6", :ns "test.example", :status ["done"]}
[debug] Result keys:(:value :ns :status)
[debug] Value field exists?true
[debug] Value field content:"6"
[debug] Output field content:nil
[debug] Response decision: has-meaningful-value=true has-output= has-error=
[debug] 📤 HTTP response for method:tools/call
[info] 🛑 Shutting down HTTP server...
